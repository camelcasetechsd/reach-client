
// ==========================================================================
// Mixins
// ==========================================================================

@mixin knockoutBold() {
  font-family: 'Knockout 47 A', 'Knockout 47 B', Helvetica, Arial, sans-serif;
  font-weight: 400; 
  font-style: normal;
  text-transform: uppercase;
}

@mixin knockout() {
  font-family: 'Knockout 27 A', 'Knockout 27 B';  
  font-weight: 400; 
  font-style: normal;
  text-transform: uppercase;
}

@mixin sofiaPro() {
  font-family: "sofia-pro","Verdana", Arial, sans-serif;
  font-style: normal;
}

@mixin sofiaProLight() {
  font-family: "sofia-pro","Verdana", Arial, sans-serif;
  font-style: normal;
  font-weight: 300;
}

@mixin sofiaProSemiBold() {
  font-family: "sofia-pro","Verdana", Arial, sans-serif;
  font-style: normal;
  font-weight: 600;
}

@mixin linear-gradient( $color1, $color2 ) {
	background-color: $color2; 
	background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from($color1), to($color2));
	background-image: -webkit-linear-gradient(left, $color1, $color2); 
	background-image:    -moz-linear-gradient(right, $color2, $color1);
	background-image:     -ms-linear-gradient(left, $color1, $color2);
	background-image:      -o-linear-gradient(left, $color1, $color2);
  background-image:         linear-gradient(top, $color1, $color2);
  filter: progid:DXImageTransform.Microsoft.gradient(GradientType=1,StartColorStr='#{$color1}', EndColorStr='#{$color2}');
}

@mixin border-radius( $radius: $default-border-radius, $vertical-radius: false ) {
	@if $vertical-radius {
		 -webkit-border-radius: $radius $vertical-radius;
		-moz-border-radius: $radius / $vertical-radius;
		border-radius: $radius / $vertical-radius;
		-moz-background-clip: padding;
		-webkit-background-clip: padding-box;
		background-clip: padding-box;
	} @else {
		-webkit-border-radius: $radius;
		-moz-border-radius: $radius;
		border-radius: $radius;
		-moz-background-clip: padding;
		-webkit-background-clip: padding-box;
		background-clip: padding-box;
	}
}

@mixin rotate( $arg ) {
  -ms-transform: rotate($arg); /* IE 9 */
  -webkit-transform: rotate($arg); /* Chrome, Safari, Opera */
  transform: rotate($arg);
}

@mixin box-shadow( $arg ) {
	-webkit-box-shadow: $arg;
	-moz-box-shadow: $arg;
	box-shadow: $arg;
}
/*
@mixin translate( $x:0, $y:0 ) {
  -moz-transform: translate(@x, @y);
  -webkit-transform: translate(@x, @y);
  -o-transform: translate(@x, @y);
  -ms-transform: translate(@x, @y);
  transform: translate(@x, @y);
}
*/	
@mixin box-sizing( $arg ) {
	-moz-box-sizing: $arg;
	-webkit-box-sizing: $arg;
	box-sizing: $arg;
}

@mixin appearance( $arg ) {
  -webkit-appearance: $arg;
  -moz-appearance: $arg;
  appearance: $arg;
}

@mixin opacity( $arg ) {
  filter: alpha(opacity=($arg * 100));
  -moz-opacity: $arg;
  -khtml-opacity: $arg;
  -webkit-opacity: $arg;
  opacity: $arg;
}

@mixin background-size( $arg ) {
  -webkit-background-size: $arg;
  -moz-background-size: $arg;
  -o-background-size: $arg;
  background-size: $arg;
}

@mixin transition( $arg ) {
  -webkit-transition: $arg;
  -moz-transition: $arg;
  -o-transition: $arg;
  -ms-transition: $arg;
  transition: $arg;
}

@mixin animation( $args ) {
	-webkit-animation: $args;
	-moz-animation: $args;
	-o-animation: $args;
	animation: $args;
}

@mixin animation-duration( $args ) {
	-webkit-animation-duration: $args;
	-moz-animation-duration: $args;
	-o-animation-duration: $args;
	animation-duration: $args;
}

@mixin animation-fill-mode( $args ) {
	-webkit-animation-fill-mode: $args;
	-moz-animation-fill-mode: $args;
	-o-animation-fill-mode: $args;
	animation-fill-mode: $args;
}

@mixin animation-timing-function( $args ) {
	-webkit-animation-timing-function: $args;
	-moz-animation-timing-function: $args;
	-o-animation-timing-function: $args;
	animation-timing-function: $args;
}

@mixin animation-name( $args ) {
	-webkit-animation-name: $args;
	-moz-animation-name: $args;
	-o-animation-name: $args;
	animation-name: $args;
}

@mixin animation-iteration-count( $arg ) {
	-webkit-animation-iteration-count: $arg;
	-moz-animation-iteration-count: $arg;
	-o-animation-iteration-count: $arg;
	animation-iteration-count: $arg;
}

@mixin nowrap() {
	text-overflow: ellipsis;
	white-space: nowrap;
	overflow: hidden;
}

@mixin breakword-hyphenated() {
	-ms-word-break: break-all;
    word-break: break-all;
    // Non standard for webkit
    word-break: break-word;

	-webkit-hyphens: auto;
	-moz-hyphens: auto;
	hyphens: auto;
}

@mixin clearfix {
	content: "";
	display: table;
	clear:both;
}

@mixin clearfix-after {
 	clear: both;
	content: " ";
	display: block;
	font-size: 0;
	height: 0;
	visibility: hidden; 
}

@mixin vertical-align( $args: null ) {
  display: block;            /* fallback */
  display: -webkit-box;      /* OLD - iOS 6-, Safari 3.1-6 */
  display: -moz-box;         /* OLD - Firefox 19- (buggy but mostly works) */
  display: -ms-flexbox;      /* TWEENER - IE 10 */
  display: -webkit-flex;     /* NEW - Chrome */
  display: flex;             /* NEW, Spec - Opera 12.1, Firefox 20+ */

  -webkit-box-pack: center;
  -moz-box-pack: center;
  -ms-flex-pack: center;

  -webkit-box-align: center;
  -moz-box-align: center;
  -ms-flex-line-pack: center;
  -webkit-align-items: center;
  align-items: center;       

  min-height: $args;  
}

@mixin flex-left() {
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flexbox;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  -webkit-box-pack: start;
  -moz-box-pack: start;
  -webkit-flex-pack: start;
  -ms-flex-pack: start;
  -webkit-justify-content: flex-start;
  justify-content: flex-start;
}

@mixin retina {
  @media
    only screen and (-webkit-min-device-pixel-ratio: 2),
    only screen and (min--moz-device-pixel-ratio: 2),
    only screen and (-o-min-device-pixel-ratio: 2/1),
    only screen and (min-device-pixel-ratio: 2),
    only screen and (min-resolution: 192dpi),
    only screen and (min-resolution: 2dppx) {
    @content;
  }
}
/**
 * Parameters
 * $button[1] = name
 * $button[2] = background-color
 * $button[3] = background-color for hover & focus
 * $button[4] = text color
 * $button[5] = ghost border color
 * $button[6] = ghost text color for hover and focus
 */
@mixin button--variation($button){
  .button--#{nth($button, 1)},
  input[type="button"].button--#{nth($button, 1)} {
    background-color: nth($button, 2);
    color: nth($button, 4);
    &:hover,
    &:focus {
      outline: none;
      background-color: nth($button, 3);
      color: nth($button, 4);
    }
    &.button--ghost {
      border: 2px solid nth($button, 5);
      background-color: transparent;
      color: nth($button, 5);
    }
  }
}

/**
 * Icon Font Mapping
 */
@mixin iconfont($input){
	.icons-#{nth($input, 1)}:before {
  		content: nth($input, 2);
	}
}
/**
 * Background Color
 */
@mixin bg-color-variations($colorList) {
@for $index from 1 to (length($colorList)+1) {
    $bgColor: nth($colorList, $index);
    .bg--#{nth($bgColor, 1)} {
      background-color: nth($bgColor, 2);
    }
  }
}
/**
 * Typography Color
 */

@mixin type-color-variations($colorList) {
@for $index from 1 to (length($colorList)+1) {
    $typeColor: nth($colorList, $index);
    .type--#{nth($typeColor, 1)} {
      color: nth($typeColor, 2);
    }
  }
}
 /*
 * Link
 *
 * Parameters
 * $textLink[1] = name
 * $textLink[2] = link-color
 * $textLink[3] = link-color for hover
 */
@mixin link-color-variations($colorList) {
@for $index from 1 to (length($colorList)+1) {
    $LinkColor: nth($colorList, $index);
    .link--#{nth($LinkColor, 1)} {
      color: nth($LinkColor, 2);
      border-color: nth($LinkColor, 2);
    }
  }
}